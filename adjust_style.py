# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AdjustStyle
                                 A QGIS plugin
 Adjust color, line thickness, font, font size etc. of all symbols/labels.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-05
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import re
from qgis.core import *
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon, QColor, QPalette
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QWidget, QLabel
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .adjust_style_dockwidget import AdjustStyleDockWidget
from .adjust_style_font_dialog import ReplaceFontDialog
import os.path




class AdjustStyle:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AdjustStyle_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Adjust Syle ')

        #print "** INITIALIZING AdjustStyle"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AdjustStyle', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/adjust_style/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Adjust Style'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING AdjustStyle"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD AdjustStyle"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Adjust Syle '),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        # del self.toolbar

    #--------------------------------------------------------------------------

    # Update preview colors

    def update_preview_colors(self):
        print('bef', self.wheel[0])
        for column, hue in enumerate(self.wheel):
            h = hue + self.dockwidget.spinBox.value()
            if h >= 360:
                h = h - 360
            print(h)
            color = QColor()
            color.setHsv(h, 250, 250, 250)
            widget = self.dockwidget.colorGrid.itemAtPosition(1, column).widget()
            palette = QPalette()
            palette.setColor(QPalette.Window, color)
            widget.setPalette(palette)
        print('aft', self.wheel[0])



    # Connect slider and spinbox
    def spinboxChangeValue(self):
        self.dockwidget.horizontalSlider.setValue(self.dockwidget.spinBox.value())
        self.update_preview_colors()

    def sliderChangeValue(self):
        self.dockwidget.spinBox.setValue(self.dockwidget.horizontalSlider.value())
        self.update_preview_colors()


    #--------------------------------------------------------------------------

    # Functions connected to buttons

    def hueBtn(self):
        self.value = self.dockwidget.spinBox.value()
        self.change_color = self.rotate_hue
        self.mapToLayers(self.layer_change_color)

    def saturationPlusBtn(self):
        self.value = 5
        self.change_color = self.change_saturation
        self.mapToLayers(self.layer_change_color)       

    def saturationMinusBtn(self):
        self.value = -5
        self.change_color = self.change_saturation
        self.mapToLayers(self.layer_change_color)  

    def hsvValuePlusBtn(self):
        self.value = 5
        self.change_color = self.change_hsv_value
        self.mapToLayers(self.layer_change_color)  

    def hsvValueMinusBtn(self):
        self.value = -5
        self.change_color = self.change_hsv_value
        self.mapToLayers(self.layer_change_color)  

    def strokeWidthPlusBtn(self):
        self.value = 0.2
        self.mapToLayers(self.layer_change_stroke)  

    def strokeWidthMinusBtn(self):
        self.value = -0.2
        self.mapToLayers(self.layer_change_stroke)  

    def fontSizePlusBtn(self):
        self.value = 0.5
        self.mapToLayers(self.layer_font_size)

    def fontSizeMinusBtn(self):
        self.value = -0.5
        self.mapToLayers(self.layer_font_size)

    def saveStylesBtn(self):
        self.counter = 0
        self.overwrite = False
        self.url = QgsProject.instance().readPath("./")
        self.url = QFileDialog.getExistingDirectory(
            self.dockwidget, 'Select a directory', self.url
        )
        if not os.access(self.url, os.W_OK):
            self.iface.messageBar().pushWarning('Save Styles', "Can't write to directory " + self.url)
            return
        print('Save styles to:', self.url)

        self.mapToLayers(self.save_layer_style)

        if self.counter > 0:
            self.iface.messageBar().pushInfo('Save styles', f'Succesfully saved styles of {self.counter} layers.')

    
    def loadStylesBtn(self):
        self.counter = 0
        self.counter_fail = 0
        self.url = QgsProject.instance().readPath("./")
        self.url = QFileDialog.getExistingDirectory(
            self.dockwidget, 'Select a directory', self.url
        )

        if not os.access(self.url, os.R_OK):
            self.iface.messageBar().pushWarning('Load Styles', "Can't read directory " + self.url)
            return
        
        print('Load styles from:', self.url)

        self.mapToLayers(self.load_layer_style)

        if self.counter == 0:
            self.iface.messageBar().pushWarnig('Load styles', f'Could not load any style for any layer.')
        elif self.counter > 0 and self.counter_fail == 0:
            self.iface.messageBar().pushInfo('Load styles', f'Succesfully loaded styles of all {self.counter} layers.')
        else:
            self.iface.messageBar().pushInfo(
                'Load styles', 
                f'Succesfully loaded styles of {self.counter} layers but failed on {self.counter_fail} layers.'
                )


    # Use the choice of layers and map the corresponding function to them

    def mapToLayers(self, func):
        self.layerchoice = self.dockwidget.buttonGroup.checkedButton().text()
        if self.layerchoice == 'Active Layer':
            layer = self.iface.activeLayer()
            func(layer)

        elif self.layerchoice == 'Selected Layers':
            for layer in self.iface.layerTreeView().selectedLayers():
                func(layer)

        elif self.layerchoice == 'Visible Layers':
            for layer in self.iface.mapCanvas().layers():
                func(layer)

        elif self.layerchoice == 'All Layers':
            for layer in QgsProject.instance().mapLayers().values():
                func(layer)
        
        return

    # Functions to change colors

    def rotate_hue(self, qcolor, degree):
        h, s, v, a = qcolor.getHsv()
        # QColor uses h = -1 for achromatic colors
        if h > -1:
            h = h + degree
            if h >= 360:
                h = h - 360
            qcolor.setHsv(h, s, v, a)
        return qcolor

    def change_hsv_value(self, qcolor, increment):
        h, s, v, a = qcolor.getHsv()
        v = v + increment
        if v > 255:
            v = 255
        elif v < 0:
            v = 0
        qcolor.setHsv(h, s, v, a)
        return qcolor        

    def change_saturation(self, qcolor, increment):
        h, s, v, a = qcolor.getHsv()
        if s > 0:
            s = s + increment
            if s > 255:
                s = 255
            elif s < 0:
                s = 0
            qcolor.setHsv(h, s, v, a)
        return qcolor 

    def layer_change_color(self, layer):
        renderer = layer.renderer()
        
        # Symbols
        if isinstance(renderer, QgsSingleSymbolRenderer):
            symbol = renderer.symbol()
            self.change_symbol_color(symbol)

        elif isinstance(renderer, QgsRuleBasedRenderer):
            for rule in renderer.rootRule().children():
                symbol = rule.symbol()
                self.change_symbol_color(symbol)

        elif isinstance(renderer, QgsCategorizedSymbolRenderer) or isinstance(renderer, QgsGraduatedSymbolRenderer):
            ramp = renderer.sourceColorRamp() # Can be None
            if isinstance(ramp, QgsGradientColorRamp):
                ramp = ramp.clone()
                self.change_ramp_colors(ramp)
                renderer.updateColorRamp(ramp)
            elif isinstance(ramp, QgsCptCityColorRamp):
                ramp = ramp.cloneGradientRamp()
                self.change_ramp_colors(ramp)
                renderer.updateColorRamp(ramp)
            elif (not ramp or isinstance(ramp, QgsRandomColorRamp)) and isinstance(renderer, QgsCategorizedSymbolRenderer): 
                for index, cat in enumerate(renderer.categories()):
                    symbol = cat.symbol().clone()
                    self.change_symbol_color(symbol)
                    renderer.updateCategorySymbol(index, symbol)
            elif (not ramp or isinstance(ramp, QgsRandomColorRamp)) and isinstance(renderer, QgsGraduatedSymbolRenderer): 
                for index, range in enumerate(renderer.ranges()):
                    symbol = range.symbol().clone()
                    self.change_symbol_color(symbol)
                    renderer.updateRangeSymbol(index, symbol)

              
            else:
                # Color Brewer Ramps and maybe other types
                pass


        """
        # Raster Layer is not working, it crashes QGIS
        elif isinstance(renderer, QgsSingleBandPseudoColorRenderer):
            func = renderer.shader().rasterShaderFunction()
            ramp = func.sourceColorRamp()
            if isinstance(ramp, QgsGradientColorRamp):
                ramp = ramp.clone()
            elif isinstance(ramp, QgsCptCityColorRamp):
                ramp = ramp.cloneGradientRamp()
            else:
                return
            self.change_ramp_colors(ramp)
            func.setSourceColorRamp(ramp)
        """

        # Labels
     
        if isinstance(layer, QgsVectorLayer) and layer.labelsEnabled():
            labeling = layer.labeling() # Returns QgsVectorLayerSimpleLabeling or QgsRuleBasedLabeling

            if isinstance(labeling, QgsVectorLayerSimpleLabeling):
                settings = labeling.settings() # Returns QgsPalLayerSettings
                settings = self.change_font_color(settings)
                labeling.setSettings(settings)

            if isinstance(labeling, QgsRuleBasedLabeling):
                for rule in labeling.rootRule().children():
                    settings = rule.settings()
                    settings = self.change_font_color(settings)
                    rule.setSettings(settings)

        layer.triggerRepaint()

        # Also show the changes in "Layer Styling" panel and TOC
        layer.emitStyleChanged()
        self.iface.layerTreeView().refreshLayerSymbology(layer.id())


    def change_symbol_color(self, symbol):
        for symlayer in symbol.symbolLayers():
            # Fill color
            color = symlayer.color() 
            color = self.change_color(color, self.value)
            symlayer.setColor(color)
            
            # Stroke color
            color = symlayer.strokeColor() 
            color = self.change_color(color, self.value)
            symlayer.setStrokeColor(color)

            # Gradient layer
            if isinstance(symlayer, QgsGradientFillSymbolLayer) or isinstance(symlayer, QgsShapeburstFillSymbolLayer):
                color = symlayer.color2()
                color = self.change_color(color, self.value)
                symlayer.setColor2(color)
            
        return

    def change_ramp_colors(self, ramp):
        color = ramp.color1()
        color = self.change_color(color, self.value)
        ramp.setColor1(color)

        color = ramp.color2()
        color = self.change_color(color, self.value)
        ramp.setColor2(color)

        new_stops = []
        for stop in ramp.stops():
            offset = stop.offset
            color = stop.color
            color = self.change_color(color, self.value)
            new_stops.append(QgsGradientStop(offset, color))
        
        ramp.setStops(new_stops)




    def change_font_color(self, settings):

        format = settings.format() # Returns QgsTextFormat

        # Font
        color = format.color()
        color = self.change_color(color, self.value)
        format.setColor(color)

        # Buffer
        bf = format.buffer() # Returns QgsTextBufferSettings
        if bf.enabled():
            color = bf.color()
            color = self.change_color(color, self.value)
            bf.setColor(color)


        # Background
        bg = format.background() # Returns QgsTextBackgroundSettings
        if bg.enabled():
            symbol = bg.fillSymbol()
            self.change_symbol_color(symbol)

        settings.setFormat(format)

        return settings
    
    # Change stroke width

    def layer_change_stroke(self, layer):

        if not isinstance(layer, QgsVectorLayer):
            return
        
        renderer = layer.renderer()
        
        if isinstance(renderer, QgsSingleSymbolRenderer):
            symbol = renderer.symbol()
            self.change_symbol_stroke(symbol)
        
        elif isinstance(renderer, QgsCategorizedSymbolRenderer):
            for index, cat in enumerate(renderer.categories()):
                symbol = cat.symbol().clone()
                self.change_symbol_stroke(symbol)
                renderer.updateCategorySymbol(index, symbol)

        elif isinstance(renderer, QgsGraduatedSymbolRenderer):
            for index, range in enumerate(renderer.ranges()):
                symbol = range.symbol().clone()
                self.change_symbol_stroke(symbol)
                renderer.updateRangeSymbol(index, symbol)

        elif isinstance(renderer, QgsRuleBasedRenderer):
            for rule in renderer.rootRule().children():
                symbol = rule.symbol()
                self.change_symbol_stroke(symbol)

        layer.triggerRepaint()
        layer.emitStyleChanged()
        return


    def change_symbol_stroke(self, symbol):
        for symlayer in symbol.symbolLayers():
            # Line symbols
            if isinstance(symbol, QgsLineSymbol):
                width = symlayer.width()
                width = width + self.value
                symlayer.setWidth(width)
            # Other symbols
            else:
                width = symlayer.strokeWidth()
                width = width + self.value
                symlayer.setStrokeWidth(width)
            
        return
    
    # Change font size

    def layer_font_size(self, layer):
        if isinstance(layer, QgsVectorLayer) and layer.labelsEnabled():
            labeling = layer.labeling() # Returns QgsVectorLayerSimpleLabeling or QgsRuleBasedLabeling

            if isinstance(labeling, QgsVectorLayerSimpleLabeling):
                settings = labeling.settings() # Returns QgsPalLayerSettings
                settings = self.change_font_size(settings)
                labeling.setSettings(settings)

            if isinstance(labeling, QgsRuleBasedLabeling):
                for rule in labeling.rootRule().children():
                    settings = rule.settings()
                    settings = self.change_font_size(settings)
                    rule.setSettings(settings)

            layer.triggerRepaint()
            layer.emitStyleChanged()
        
        return

    def change_font_size(self, settings):
        format = settings.format() # Returns QgsTextFormat
        size = format.size()
        size = size + self.value
        if size < 0:
            size = 0
        format.setSize(size)
        settings.setFormat(format)
        return settings

    # Replace Font

    def replace_font_dlg(self):
        self.dlg = ReplaceFontDialog()

        # Get a set of all fonts in the project
        self.fontset = set()
        self.mapToLayers(self.collect_fonts)
        
        # Populate combo box
        self.dlg.currentFontsComboBox.clear()
        self.fontset = list(sorted(self.fontset))
        self.dlg.currentFontsComboBox.addItems(self.fontset)
        
        # Show dialog, run dialog event loop
        self.dlg.show()
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            i = self.dlg.currentFontsComboBox.currentIndex()
            self.oldfont = self.fontset[i] # string
            self.newfont = self.dlg.fontComboBox.currentFont() # QFont
            self.mapToLayers(self.replace_font)

 
    def collect_fonts(self, layer):
        if isinstance(layer, QgsVectorLayer) and layer.labelsEnabled():
            labeling = layer.labeling() # Returns QgsVectorLayerSimpleLabeling or QgsRuleBasedLabeling

            if isinstance(labeling, QgsVectorLayerSimpleLabeling):
                format = labeling.settings().format() # Returns QgsTextFormat
                self.fontset.add(format.font().family())

            if isinstance(labeling, QgsRuleBasedLabeling):
                for rule in labeling.rootRule().children():
                    format = rule.settings().format()
                    self.fontset.add(format.font().family())

    def replace_font(self, layer):
        if isinstance(layer, QgsVectorLayer) and layer.labelsEnabled():
            labeling = layer.labeling() # Returns QgsVectorLayerSimpleLabeling or QgsRuleBasedLabeling

            if isinstance(labeling, QgsVectorLayerSimpleLabeling):
                settings = labeling.settings()
                format = settings.format() # Returns QgsTextFormat
                if format.font().family() == self.oldfont:
                    format.setFont(self.newfont)
                    settings.setFormat(format)
                    labeling.setSettings(settings)


            if isinstance(labeling, QgsRuleBasedLabeling):
                for rule in labeling.rootRule().children():
                    settings = rule.settings()
                    format = settings.format()
                    if format.font().family() == self.oldfont:
                        format.setFont(self.newfont)
                        settings.setFormat(format)
                        rule.setSettings(settings)

            layer.triggerRepaint() 
            layer.emitStyleChanged()          


    # Load and save styles

    def save_layer_style(self, layer):
        # Remove bad characters from layer name
        clean_name = re.sub(r'[^\w_.-]', '_', layer.name()) 

        # Check if there are more layers of the same name
        listoflayers = QgsProject.instance().mapLayersByName(layer.name())
        if len(listoflayers) == 1:
            filename = clean_name + '.qml'
        else:
            i = listoflayers.index(layer)
            filename = clean_name + '__(' + str(i).zfill(2) + ').qml'

        url = os.path.join(self.url, filename)

        # Check if file exits
        if os.path.exists(url) and not self.overwrite:
            
            choice = QMessageBox.question(
                self.dockwidget,
                'File exists',
                f'File {filename} already exists. Do you want to overwrite it?',
                QMessageBox.YesToAll | QMessageBox.Yes | QMessageBox.No
            )
            if choice == QMessageBox.Yes:
                pass
            elif choice == QMessageBox.YesToAll:
                self.overwrite = True
            else:
                return

        # Save Style    
        status = layer.saveNamedStyle(url)

        # status is a tuple (str, bool)
        if not status[1]:
            self.iface.messageBar().pushWarning('Save Style ' + layer.name() + 'failed:', status[0])
        else:
            self.counter += 1


    def load_layer_style(self, layer):
        # Remove bad characters from layer name
        clean_name = re.sub(r'[^\w_.-]', '_', layer.name()) 

        url = os.path.join(self.url, clean_name + '.qml')

        # Handle the dublicate layer name problem
        listoflayers = QgsProject.instance().mapLayersByName(layer.name())
        if len(listoflayers) > 1:
            i = listoflayers.index(layer)
            filename = clean_name + '__(' + str(i).zfill(2) + ').qml'
            url1 = os.path.join(self.url, filename) 
            if os.path.exists(url1):
                url = url1
            else:
                # Use a filename without number if it exists, else try (00)
                if not os.path.exists(url):
                    url = os.path.join(self.url, clean_name + '__(00).qml')
        else:
            # If filename without number does not exist, try (00)
            if not os.path.exists(url):
                    url = os.path.join(self.url, clean_name + '__(00).qml')


        # Load the style
        status = layer.loadNamedStyle(url, True) 
        
        if status[1]:
            self.counter += 1
        else:
            self.counter_fail += 1
            print(status)

        layer.triggerRepaint()
        layer.emitStyleChanged()

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING AdjustStyle"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = AdjustStyleDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # Init slider and spinbox widgets
            self.value = 30
            self.dockwidget.horizontalSlider.setValue(self.value) 
            self.dockwidget.spinBox.setValue(self.value) 
            self.dockwidget.horizontalSlider.valueChanged[int].connect(self.sliderChangeValue)
            self.dockwidget.spinBox.valueChanged.connect(self.spinboxChangeValue)

            # Create color grid
            self.wheel = range(0, 360, 30)

            for column, hue in enumerate(self.wheel):
                for row in range(2):
                    color = QColor()
                    color.setHsv(hue, 250, 250, 250)
                    widget = QLabel(' ')
                    widget.setAutoFillBackground(True) 
                    palette = QPalette()
                    palette.setColor(QPalette.Window, color)
                    widget.setPalette(palette)
                    self.dockwidget.colorGrid.addWidget(widget, row, column)

            self.update_preview_colors()

            # Connect buttons
            self.dockwidget.hueButton.clicked.connect(self.hueBtn)
            self.dockwidget.plusSatButton.clicked.connect(self.saturationPlusBtn)
            self.dockwidget.minusSatButton.clicked.connect(self.saturationMinusBtn)
            self.dockwidget.plusValueButton.clicked.connect(self.hsvValuePlusBtn)
            self.dockwidget.minusValueButton.clicked.connect(self.hsvValueMinusBtn)
            self.dockwidget.plusStrokeWidthButton.clicked.connect(self.strokeWidthPlusBtn)
            self.dockwidget.minusStrokeWidthButton.clicked.connect(self.strokeWidthMinusBtn)
            self.dockwidget.plusFontSizeButton.clicked.connect(self.fontSizePlusBtn)
            self.dockwidget.minusFontSizeButton.clicked.connect(self.fontSizeMinusBtn)
            self.dockwidget.replaceFontButton.clicked.connect(self.replace_font_dlg)
            self.dockwidget.saveStylesButton.clicked.connect(self.saveStylesBtn)
            self.dockwidget.loadStylesButton.clicked.connect(self.loadStylesBtn)
            
            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
