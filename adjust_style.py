# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AdjustStyle
                                 A QGIS plugin
 Adjust color, line thickness, font size etc. of all symbols/labels.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-05
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import *
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .adjust_style_dockwidget import AdjustStyleDockWidget
import os.path


class AdjustStyle:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AdjustStyle_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Adjust Syle ')

        #print "** INITIALIZING AdjustStyle"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AdjustStyle', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/adjust_style/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Adjust Style'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING AdjustStyle"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD AdjustStyle"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Adjust Syle '),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        # del self.toolbar

    #--------------------------------------------------------------------------

    def spinboxChangeValue(self):
        self.dockwidget.horizontalSlider.setValue(self.dockwidget.spinBox.value())

    def sliderChangeValue(self):
        self.dockwidget.spinBox.setValue(self.dockwidget.horizontalSlider.value())

    #--------------------------------------------------------------------------

    def hueBtn(self):
        self.degree = self.dockwidget.spinBox.value()
        self.layerchoice = self.dockwidget.buttonGroup.checkedButton().text()
        print(self.layerchoice)
        print(self.degree)

        if self.layerchoice == 'Active Layer':
            layer = self.iface.activeLayer()
            self.layer_change_color(layer)

        if self.layerchoice == 'Selected Layers':
            for layer in self.iface.layerTreeView().selectedLayers():
                self.layer_change_color(layer)

        if self.layerchoice == 'Visible Layers':
            for layer in self.iface.mapCanvas().layers():
                self.layer_change_color(layer)

        if self.layerchoice == 'All Layers':
            for layer in QgsProject.instance().mapLayers().values():
                self.layer_change_color(layer)

    def layer_change_color(self, layer):
        renderer = layer.renderer()
        
        # Symbols
        if isinstance(renderer, QgsSingleSymbolRenderer):
            symbol = renderer.symbol()
            self.change_symbol_color(symbol)
        
        # Funkt nicht
        elif isinstance(renderer, QgsCategorizedSymbolRenderer):
            for cat in renderer.categories():
                symbol = cat.symbol()
                self.change_symbol_color(symbol)
                

        elif isinstance(renderer, QgsRuleBasedRenderer):
            for rule in renderer.rootRule().children():
                symbol = rule.symbol()
                self.change_symbol_color(symbol)


        # Labels
        if layer.labelsEnabled():
            labeling = layer.labeling() # Returns QgsVectorLayerSimpleLabeling or QgsRuleBasedLabeling

            if isinstance(labeling, QgsVectorLayerSimpleLabeling):
                settings = labeling.settings() # Returns QgsPalLayerSettings
                settings = self.change_font_color(settings)
                labeling.setSettings(settings)
                #layer.setLabeling(QgsVectorLayerSimpleLabeling(settings))

            if isinstance(labeling, QgsRuleBasedLabeling):
                for rule in labeling.rootRule().children():
                    settings = rule.settings()
                    settings = self.change_font_color(settings)
                    rule.setSettings(settings)

        layer.triggerRepaint()


    def rotate_hue(self, qcolor, degree):
        h, s, v, a = qcolor.getHsv()
        # QColor uses h = -1 for achromatic colors
        if h > -1:
            h = h + degree
            if h >= 360:
                h = h - 360
            qcolor.setHsv(h, s, v, a)
        return qcolor


    def change_symbol_color(self, symbol):
        for symlayer in symbol.symbolLayers():
            print(type(symlayer))
            # Fill color
            color = symlayer.color() 
            # print('RGB1', color.getRgb())
            color = self.rotate_hue(color, self.degree)
            # print('RGB2', color.getRgb())
            symlayer.setColor(color)
            
            # Stroke color
            color = symlayer.strokeColor() 
            color = self.rotate_hue(color, self.degree)
            symlayer.setStrokeColor(color)

            # Gradient layer
            if isinstance(symlayer, QgsGradientFillSymbolLayer) or isinstance(symlayer, QgsShapeburstFillSymbolLayer):
                color = symlayer.color2()
                color = self.rotate_hue(color, self.degree)
                symlayer.setColor2(color)
            
        return
        

    def change_font_color(self, settings):

        format = settings.format() # Returns QgsTextFormat

        # Font
        color = format.color()
        color = self.rotate_hue(color, self.degree)
        format.setColor(color)

        # Buffer
        bf = format.buffer() # Returns QgsTextBufferSettings
        if bf.enabled():
            color = bf.color()
            color = self.rotate_hue(color, self.degree)
            bf.setColor(color)


        # Background
        bg = format.background() # Returns QgsTextBackgroundSettings
        if bg.enabled():
            symbol = bg.fillSymbol()
            self.change_symbol_color(symbol)

        settings.setFormat(format)

        return settings
    

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING AdjustStyle"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = AdjustStyleDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # Init widgets 
            self.dockwidget.horizontalSlider.valueChanged[int].connect(self.sliderChangeValue)
            self.dockwidget.spinBox.valueChanged.connect(self.spinboxChangeValue)

            # Connect buttons
            self.dockwidget.hueButton.clicked.connect(self.hueBtn)


            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
