# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AdjustStyleDockWidget
                                 A QGIS plugin
 Adjust color, line thickness, font size etc. of all symbols/labels.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-05
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, Qt
from qgis.PyQt.QtWidgets import QAction, QLabel, QCheckBox
from qgis.PyQt.QtGui import QColor, QPalette

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'adjust_style_dockwidget_base.ui'))


class AdjustStyleDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(AdjustStyleDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Init slider and spinbox widgets
        self.horizontalSlider.setValue(30) 
        self.spinBox.setValue(30) 
        self.horizontalSlider.valueChanged[int].connect(self.sliderChangeValue)
        self.spinBox.valueChanged[int].connect(self.spinboxChangeValue)

        self.changeSlider.setValue(20)
        self.changeSpinBox.setValue(20)
        self.changeSlider.valueChanged.connect(self.changeSliderChangeValue)
        self.changeSpinBox.valueChanged.connect(self.changeSpinboxChangeValue)

        # Create color grid
        self.wheel = range(0, 360, 30)


        tooltip = self.tr('Preview of rotating color hue (color wheel)')

        for column, hue in enumerate(self.wheel):
            for row in range(2):
                color = QColor()
                color.setHsv(hue, 250, 250, 250)
                widget = QLabel(' ')
                widget.setAutoFillBackground(True) 
                palette = QPalette()
                palette.setColor(QPalette.Window, color)
                widget.setPalette(palette)
                widget.setToolTip(tooltip)
                self.colorGrid.addWidget(widget, row, column)

        self.update_preview_colors()


    #--------------------------------------------------------------------------

    # Update preview colors

    def update_preview_colors(self):
        for column, hue in enumerate(self.wheel):
            h = hue + self.spinBox.value()
            if h >= 360:
                h = h - 360
            color = QColor()
            color.setHsv(h, 250, 250, 250)
            widget = self.colorGrid.itemAtPosition(1, column).widget()
            palette = QPalette()
            palette.setColor(QPalette.Window, color)
            widget.setPalette(palette)


    # Connect slider and spinbox
    def spinboxChangeValue(self):
        self.horizontalSlider.setValue(self.spinBox.value())
        self.update_preview_colors()

    def sliderChangeValue(self):
        self.spinBox.setValue(self.horizontalSlider.value())
        self.update_preview_colors()

    def changeSpinboxChangeValue(self):
        self.changeSlider.setValue(int(self.changeSpinBox.value()))

    def changeSliderChangeValue(self):
        self.changeSpinBox.setValue(int(self.changeSlider.value()))





    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()



class AdjustStyleLayoutDockWidget(AdjustStyleDockWidget):
    def __init__(self, parent=None):
        super(AdjustStyleLayoutDockWidget, self).__init__(parent)

        self.radioActiveLayer.setParent(None)
        self.radioAllLayers.setParent(None)
        self.radioSelectedLayers.setParent(None)
        self.radioVisibleLayers.setParent(None)
        self.label_6.setParent(None)
        self.checkAnnotation.setParent(None)
        self.checkCanvas.setParent(None)
        self.loadStylesButton.setParent(None)
        self.saveStylesButton.setParent(None)

        container = self.verticalLayout_2

        self.checkLegend = QCheckBox('Legend')
        self.checkScalebar = QCheckBox('Scalebar')
        self.checkTextLabels = QCheckBox('Text Labels')
        self.checkShapes = QCheckBox('Shapes')

        self.checkLegend.setChecked(True)
        self.checkScalebar.setChecked(True)
        self.checkTextLabels.setChecked(True)
        self.checkShapes.setChecked(True)


        container.insertWidget(0, self.checkLegend)
        container.insertWidget(1, self.checkScalebar)
        container.insertWidget(2, self.checkTextLabels)
        container.insertWidget(3, self.checkShapes)


        




class AdjustStyleLayoutHandler():
    def __init__(self, plugin_instance, designer):
        self.plugin_instance = plugin_instance
        self.designer = designer
        self.dockwidget = None


        self.action = QAction(plugin_instance.icon, plugin_instance.menu, designer)
        self.action.triggered.connect(self.openDesignerDockWidget)
        self.action.setEnabled(True)

        toolbar = designer.actionsToolbar()
        toolbar.addAction(self.action)

        editmenu = designer.editMenu()
        editmenu.addAction(self.action)

        

    def openDesignerDockWidget(self):
        if self.dockwidget is None:
            self.dockwidget = AdjustStyleLayoutDockWidget(self.designer.window())
            self.designer.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)

        self.dockwidget.show()

    def unload(self):
        toolbar = self.designer.actionsToolbar()
        toolbar.removeAction(self.action)
        editmenu = self.designer.editMenu()
        editmenu.removeAction(self.action)
        self.dockwidget = None
